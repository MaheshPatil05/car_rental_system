import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate; // For modern date handling
import java.util.ArrayList;
import java.util.List;

public class RentalDAO {

    // Method to create a new rental record in the database
    public boolean createRental(Rental rental) {
        // rental_id is typically auto-generated by the database (SERIAL)
        String sql = "INSERT INTO rentals (user_id, car_id, start_date, end_date) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, rental.getUserId());
            pstmt.setInt(2, rental.getCarId());
            pstmt.setDate(3, Date.valueOf(rental.getStartDate())); // Convert LocalDate to java.sql.Date
            pstmt.setDate(4, Date.valueOf(rental.getEndDate()));

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Database error creating rental: " + e.getMessage());
            return false;
        }
    }

    // Method to find a rental by its ID
    public Rental findRentalById(int rentalId) {
        String sql = "SELECT id, user_id, car_id, start_date, end_date FROM rentals WHERE id = ?";
        Rental rental = null;
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, rentalId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                rental = new Rental(
                        rs.getInt("id"),
                        rs.getInt("user_id"),
                        rs.getInt("car_id"),
                        rs.getDate("start_date").toLocalDate(), // Convert java.sql.Date to LocalDate
                        rs.getDate("end_date").toLocalDate()
                );
            }
        } catch (SQLException e) {
            System.err.println("Database error during rental lookup: " + e.getMessage());
        }
        return rental;
    }

    // Method to get all active rentals for a specific user
    public List<Rental> getRentalsByUserId(int userId) {
        List<Rental> userRentals = new ArrayList<>();
        // Assuming "active" means end_date is in the future or current
        String sql = "SELECT id, user_id, car_id, start_date, end_date FROM rentals WHERE user_id = ? AND end_date >= CURRENT_DATE";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                userRentals.add(new Rental(
                        rs.getInt("id"),
                        rs.getInt("user_id"),
                        rs.getInt("car_id"),
                        rs.getDate("start_date").toLocalDate(),
                        rs.getDate("end_date").toLocalDate()
                ));
            }
        } catch (SQLException e) {
            System.err.println("Database error retrieving user rentals: " + e.getMessage());
        }
        return userRentals;
    }

    // Method to update a rental (e.g., extend end date, mark as returned)
    // For simplicity, this example just updates the end date.
    // In a real system, you might add a 'status' to Rental like 'active', 'completed', 'cancelled'.
    public boolean updateRentalEndDate(int rentalId, LocalDate newEndDate) {
        String sql = "UPDATE rentals SET end_date = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setDate(1, Date.valueOf(newEndDate));
            pstmt.setInt(2, rentalId);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Database error updating rental end date: " + e.getMessage());
            return false;
        }
    }
}